//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 5 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `AuteursBackground`.
    static let auteursBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "AuteursBackground")
    /// Color `rw-dark`.
    static let rwDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "rw-dark")
    /// Color `rw-green`.
    static let rwGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "rw-green")
    /// Color `rw-light`.
    static let rwLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "rw-light")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AuteursBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func auteursBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.auteursBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "rw-dark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func rwDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.rwDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "rw-green", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func rwGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.rwGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "rw-light", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func rwLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.rwLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AuteursBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func auteursBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.auteursBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "rw-dark", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func rwDark(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.rwDark.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "rw-green", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func rwGreen(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.rwGreen.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "rw-light", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func rwLight(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.rwLight.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `albums.json`.
    static let albumsJson = Rswift.FileResource(bundle: R.hostingBundle, name: "albums", pathExtension: "json")
    /// Resource file `auteurs.json`.
    static let auteursJson = Rswift.FileResource(bundle: R.hostingBundle, name: "auteurs", pathExtension: "json")
    /// Resource file `content.json`.
    static let contentJson = Rswift.FileResource(bundle: R.hostingBundle, name: "content", pathExtension: "json")
    /// Resource file `homepage.json`.
    static let homepageJson = Rswift.FileResource(bundle: R.hostingBundle, name: "homepage", pathExtension: "json")

    /// `bundle.url(forResource: "albums", withExtension: "json")`
    static func albumsJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.albumsJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "auteurs", withExtension: "json")`
    static func auteursJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.auteursJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "content", withExtension: "json")`
    static func contentJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.contentJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "homepage", withExtension: "json")`
    static func homepageJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.homepageJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 109 images.
  struct image {
    /// Image `Checkmark`.
    static let checkmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "Checkmark")
    /// Image `Download`.
    static let download = Rswift.ImageResource(bundle: R.hostingBundle, name: "Download")
    /// Image `HighlightedOval`.
    static let highlightedOval = Rswift.ImageResource(bundle: R.hostingBundle, name: "HighlightedOval")
    /// Image `HighlightedRect`.
    static let highlightedRect = Rswift.ImageResource(bundle: R.hostingBundle, name: "HighlightedRect")
    /// Image `Oval`.
    static let oval = Rswift.ImageResource(bundle: R.hostingBundle, name: "Oval")
    /// Image `RectThumb`.
    static let rectThumb = Rswift.ImageResource(bundle: R.hostingBundle, name: "RectThumb")
    /// Image `background_Bayleaf`.
    static let background_Bayleaf = Rswift.ImageResource(bundle: R.hostingBundle, name: "background_Bayleaf")
    /// Image `background`.
    static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "background")
    /// Image `blackKlansmanBig`.
    static let blackKlansmanBig = Rswift.ImageResource(bundle: R.hostingBundle, name: "blackKlansmanBig")
    /// Image `blackKlansman`.
    static let blackKlansman = Rswift.ImageResource(bundle: R.hostingBundle, name: "blackKlansman")
    /// Image `brightStar`.
    static let brightStar = Rswift.ImageResource(bundle: R.hostingBundle, name: "brightStar")
    /// Image `budapestHotel`.
    static let budapestHotel = Rswift.ImageResource(bundle: R.hostingBundle, name: "budapestHotel")
    /// Image `candle`.
    static let candle = Rswift.ImageResource(bundle: R.hostingBundle, name: "candle")
    /// Image `cat`.
    static let cat = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat")
    /// Image `confetti0`.
    static let confetti0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "confetti0")
    /// Image `confetti1`.
    static let confetti1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "confetti1")
    /// Image `confetti2`.
    static let confetti2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "confetti2")
    /// Image `confetti3`.
    static let confetti3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "confetti3")
    /// Image `confetti4`.
    static let confetti4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "confetti4")
    /// Image `confetti5`.
    static let confetti5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "confetti5")
    /// Image `davidCronenberg`.
    static let davidCronenberg = Rswift.ImageResource(bundle: R.hostingBundle, name: "davidCronenberg")
    /// Image `departed`.
    static let departed = Rswift.ImageResource(bundle: R.hostingBundle, name: "departed")
    /// Image `doTheRightThing`.
    static let doTheRightThing = Rswift.ImageResource(bundle: R.hostingBundle, name: "doTheRightThing")
    /// Image `dribbble`.
    static let dribbble = Rswift.ImageResource(bundle: R.hostingBundle, name: "dribbble")
    /// Image `escapeNewYork`.
    static let escapeNewYork = Rswift.ImageResource(bundle: R.hostingBundle, name: "escapeNewYork")
    /// Image `estonia`.
    static let estonia = Rswift.ImageResource(bundle: R.hostingBundle, name: "estonia")
    /// Image `existenz`.
    static let existenz = Rswift.ImageResource(bundle: R.hostingBundle, name: "existenz")
    /// Image `feature-bg`.
    static let featureBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "feature-bg")
    /// Image `fluidPhoto10`.
    static let fluidPhoto10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluidPhoto10")
    /// Image `fluidPhoto11`.
    static let fluidPhoto11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluidPhoto11")
    /// Image `fluidPhoto12`.
    static let fluidPhoto12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluidPhoto12")
    /// Image `fluidPhoto13`.
    static let fluidPhoto13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluidPhoto13")
    /// Image `fluidPhoto14`.
    static let fluidPhoto14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluidPhoto14")
    /// Image `fluidPhoto15`.
    static let fluidPhoto15 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluidPhoto15")
    /// Image `fluidPhoto16`.
    static let fluidPhoto16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluidPhoto16")
    /// Image `fluidPhoto17`.
    static let fluidPhoto17 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluidPhoto17")
    /// Image `fluidPhoto18`.
    static let fluidPhoto18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluidPhoto18")
    /// Image `fluidPhoto1`.
    static let fluidPhoto1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluidPhoto1")
    /// Image `fluidPhoto2`.
    static let fluidPhoto2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluidPhoto2")
    /// Image `fluidPhoto3`.
    static let fluidPhoto3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluidPhoto3")
    /// Image `fluidPhoto4`.
    static let fluidPhoto4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluidPhoto4")
    /// Image `fluidPhoto5`.
    static let fluidPhoto5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluidPhoto5")
    /// Image `fluidPhoto6`.
    static let fluidPhoto6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluidPhoto6")
    /// Image `fluidPhoto7`.
    static let fluidPhoto7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluidPhoto7")
    /// Image `fluidPhoto8`.
    static let fluidPhoto8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluidPhoto8")
    /// Image `fluidPhoto9`.
    static let fluidPhoto9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluidPhoto9")
    /// Image `france`.
    static let france = Rswift.ImageResource(bundle: R.hostingBundle, name: "france")
    /// Image `germany`.
    static let germany = Rswift.ImageResource(bundle: R.hostingBundle, name: "germany")
    /// Image `ghost`.
    static let ghost = Rswift.ImageResource(bundle: R.hostingBundle, name: "ghost")
    /// Image `goodfellas`.
    static let goodfellas = Rswift.ImageResource(bundle: R.hostingBundle, name: "goodfellas")
    /// Image `halloween`.
    static let halloween = Rswift.ImageResource(bundle: R.hostingBundle, name: "halloween")
    /// Image `hat`.
    static let hat = Rswift.ImageResource(bundle: R.hostingBundle, name: "hat")
    /// Image `heart`.
    static let heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart")
    /// Image `holySmoke`.
    static let holySmoke = Rswift.ImageResource(bundle: R.hostingBundle, name: "holySmoke")
    /// Image `ic_backpack`.
    static let ic_backpack = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_backpack")
    /// Image `ic_book`.
    static let ic_book = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_book")
    /// Image `ic_camera`.
    static let ic_camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_camera")
    /// Image `ic_coffee`.
    static let ic_coffee = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_coffee")
    /// Image `ic_glasses`.
    static let ic_glasses = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_glasses")
    /// Image `ic_ice_cream`.
    static let ic_ice_cream = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_ice_cream")
    /// Image `ic_smoking_pipe`.
    static let ic_smoking_pipe = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_smoking_pipe")
    /// Image `ic_vespa`.
    static let ic_vespa = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_vespa")
    /// Image `inTheCut`.
    static let inTheCut = Rswift.ImageResource(bundle: R.hostingBundle, name: "inTheCut")
    /// Image `ireland`.
    static let ireland = Rswift.ImageResource(bundle: R.hostingBundle, name: "ireland")
    /// Image `italy`.
    static let italy = Rswift.ImageResource(bundle: R.hostingBundle, name: "italy")
    /// Image `janeCampion`.
    static let janeCampion = Rswift.ImageResource(bundle: R.hostingBundle, name: "janeCampion")
    /// Image `johnCarpenter`.
    static let johnCarpenter = Rswift.ImageResource(bundle: R.hostingBundle, name: "johnCarpenter")
    /// Image `jungleFever`.
    static let jungleFever = Rswift.ImageResource(bundle: R.hostingBundle, name: "jungleFever")
    /// Image `kanagawa`.
    static let kanagawa = Rswift.ImageResource(bundle: R.hostingBundle, name: "kanagawa")
    /// Image `lifeAquatic`.
    static let lifeAquatic = Rswift.ImageResource(bundle: R.hostingBundle, name: "lifeAquatic")
    /// Image `like_fill`.
    static let like_fill = Rswift.ImageResource(bundle: R.hostingBundle, name: "like_fill")
    /// Image `like_normal`.
    static let like_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "like_normal")
    /// Image `like`.
    static let like = Rswift.ImageResource(bundle: R.hostingBundle, name: "like")
    /// Image `malcomX`.
    static let malcomX = Rswift.ImageResource(bundle: R.hostingBundle, name: "malcomX")
    /// Image `martinScorsese`.
    static let martinScorsese = Rswift.ImageResource(bundle: R.hostingBundle, name: "martinScorsese")
    /// Image `mascot_swifty-birthday-party`.
    static let mascot_swiftyBirthdayParty = Rswift.ImageResource(bundle: R.hostingBundle, name: "mascot_swifty-birthday-party")
    /// Image `monaco`.
    static let monaco = Rswift.ImageResource(bundle: R.hostingBundle, name: "monaco")
    /// Image `nigeria`.
    static let nigeria = Rswift.ImageResource(bundle: R.hostingBundle, name: "nigeria")
    /// Image `overlay`.
    static let overlay = Rswift.ImageResource(bundle: R.hostingBundle, name: "overlay")
    /// Image `owl`.
    static let owl = Rswift.ImageResource(bundle: R.hostingBundle, name: "owl")
    /// Image `pause`.
    static let pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "pause")
    /// Image `play`.
    static let play = Rswift.ImageResource(bundle: R.hostingBundle, name: "play")
    /// Image `poland`.
    static let poland = Rswift.ImageResource(bundle: R.hostingBundle, name: "poland")
    /// Image `pot`.
    static let pot = Rswift.ImageResource(bundle: R.hostingBundle, name: "pot")
    /// Image `pumkin`.
    static let pumkin = Rswift.ImageResource(bundle: R.hostingBundle, name: "pumkin")
    /// Image `ragingBull`.
    static let ragingBull = Rswift.ImageResource(bundle: R.hostingBundle, name: "ragingBull")
    /// Image `rip`.
    static let rip = Rswift.ImageResource(bundle: R.hostingBundle, name: "rip")
    /// Image `royalTenenbaums`.
    static let royalTenenbaums = Rswift.ImageResource(bundle: R.hostingBundle, name: "royalTenenbaums")
    /// Image `rushmore`.
    static let rushmore = Rswift.ImageResource(bundle: R.hostingBundle, name: "rushmore")
    /// Image `russia`.
    static let russia = Rswift.ImageResource(bundle: R.hostingBundle, name: "russia")
    /// Image `rwdevcon-bg`.
    static let rwdevconBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "rwdevcon-bg")
    /// Image `scanners`.
    static let scanners = Rswift.ImageResource(bundle: R.hostingBundle, name: "scanners")
    /// Image `se-icon`.
    static let seIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "se-icon")
    /// Image `skull`.
    static let skull = Rswift.ImageResource(bundle: R.hostingBundle, name: "skull")
    /// Image `sky`.
    static let sky = Rswift.ImageResource(bundle: R.hostingBundle, name: "sky")
    /// Image `smile`.
    static let smile = Rswift.ImageResource(bundle: R.hostingBundle, name: "smile")
    /// Image `spain`.
    static let spain = Rswift.ImageResource(bundle: R.hostingBundle, name: "spain")
    /// Image `spikeLee`.
    static let spikeLee = Rswift.ImageResource(bundle: R.hostingBundle, name: "spikeLee")
    /// Image `star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "star")
    /// Image `taxiDriver`.
    static let taxiDriver = Rswift.ImageResource(bundle: R.hostingBundle, name: "taxiDriver")
    /// Image `theFly`.
    static let theFly = Rswift.ImageResource(bundle: R.hostingBundle, name: "theFly")
    /// Image `thePiano`.
    static let thePiano = Rswift.ImageResource(bundle: R.hostingBundle, name: "thePiano")
    /// Image `theThing`.
    static let theThing = Rswift.ImageResource(bundle: R.hostingBundle, name: "theThing")
    /// Image `theyLive`.
    static let theyLive = Rswift.ImageResource(bundle: R.hostingBundle, name: "theyLive")
    /// Image `toxic`.
    static let toxic = Rswift.ImageResource(bundle: R.hostingBundle, name: "toxic")
    /// Image `uk`.
    static let uk = Rswift.ImageResource(bundle: R.hostingBundle, name: "uk")
    /// Image `us`.
    static let us = Rswift.ImageResource(bundle: R.hostingBundle, name: "us")
    /// Image `videodrome`.
    static let videodrome = Rswift.ImageResource(bundle: R.hostingBundle, name: "videodrome")
    /// Image `wesAnderson`.
    static let wesAnderson = Rswift.ImageResource(bundle: R.hostingBundle, name: "wesAnderson")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Checkmark", bundle: ..., traitCollection: ...)`
    static func checkmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Download", bundle: ..., traitCollection: ...)`
    static func download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.download, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HighlightedOval", bundle: ..., traitCollection: ...)`
    static func highlightedOval(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.highlightedOval, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HighlightedRect", bundle: ..., traitCollection: ...)`
    static func highlightedRect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.highlightedRect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Oval", bundle: ..., traitCollection: ...)`
    static func oval(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.oval, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RectThumb", bundle: ..., traitCollection: ...)`
    static func rectThumb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectThumb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background", bundle: ..., traitCollection: ...)`
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background_Bayleaf", bundle: ..., traitCollection: ...)`
    static func background_Bayleaf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background_Bayleaf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blackKlansman", bundle: ..., traitCollection: ...)`
    static func blackKlansman(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blackKlansman, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blackKlansmanBig", bundle: ..., traitCollection: ...)`
    static func blackKlansmanBig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blackKlansmanBig, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "brightStar", bundle: ..., traitCollection: ...)`
    static func brightStar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brightStar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "budapestHotel", bundle: ..., traitCollection: ...)`
    static func budapestHotel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.budapestHotel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "candle", bundle: ..., traitCollection: ...)`
    static func candle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.candle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat", bundle: ..., traitCollection: ...)`
    static func cat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "confetti0", bundle: ..., traitCollection: ...)`
    static func confetti0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confetti0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "confetti1", bundle: ..., traitCollection: ...)`
    static func confetti1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confetti1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "confetti2", bundle: ..., traitCollection: ...)`
    static func confetti2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confetti2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "confetti3", bundle: ..., traitCollection: ...)`
    static func confetti3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confetti3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "confetti4", bundle: ..., traitCollection: ...)`
    static func confetti4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confetti4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "confetti5", bundle: ..., traitCollection: ...)`
    static func confetti5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confetti5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "davidCronenberg", bundle: ..., traitCollection: ...)`
    static func davidCronenberg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.davidCronenberg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "departed", bundle: ..., traitCollection: ...)`
    static func departed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.departed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "doTheRightThing", bundle: ..., traitCollection: ...)`
    static func doTheRightThing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doTheRightThing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dribbble", bundle: ..., traitCollection: ...)`
    static func dribbble(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dribbble, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "escapeNewYork", bundle: ..., traitCollection: ...)`
    static func escapeNewYork(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.escapeNewYork, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "estonia", bundle: ..., traitCollection: ...)`
    static func estonia(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.estonia, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "existenz", bundle: ..., traitCollection: ...)`
    static func existenz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.existenz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feature-bg", bundle: ..., traitCollection: ...)`
    static func featureBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.featureBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluidPhoto1", bundle: ..., traitCollection: ...)`
    static func fluidPhoto1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluidPhoto1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluidPhoto10", bundle: ..., traitCollection: ...)`
    static func fluidPhoto10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluidPhoto10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluidPhoto11", bundle: ..., traitCollection: ...)`
    static func fluidPhoto11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluidPhoto11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluidPhoto12", bundle: ..., traitCollection: ...)`
    static func fluidPhoto12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluidPhoto12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluidPhoto13", bundle: ..., traitCollection: ...)`
    static func fluidPhoto13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluidPhoto13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluidPhoto14", bundle: ..., traitCollection: ...)`
    static func fluidPhoto14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluidPhoto14, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluidPhoto15", bundle: ..., traitCollection: ...)`
    static func fluidPhoto15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluidPhoto15, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluidPhoto16", bundle: ..., traitCollection: ...)`
    static func fluidPhoto16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluidPhoto16, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluidPhoto17", bundle: ..., traitCollection: ...)`
    static func fluidPhoto17(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluidPhoto17, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluidPhoto18", bundle: ..., traitCollection: ...)`
    static func fluidPhoto18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluidPhoto18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluidPhoto2", bundle: ..., traitCollection: ...)`
    static func fluidPhoto2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluidPhoto2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluidPhoto3", bundle: ..., traitCollection: ...)`
    static func fluidPhoto3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluidPhoto3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluidPhoto4", bundle: ..., traitCollection: ...)`
    static func fluidPhoto4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluidPhoto4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluidPhoto5", bundle: ..., traitCollection: ...)`
    static func fluidPhoto5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluidPhoto5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluidPhoto6", bundle: ..., traitCollection: ...)`
    static func fluidPhoto6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluidPhoto6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluidPhoto7", bundle: ..., traitCollection: ...)`
    static func fluidPhoto7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluidPhoto7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluidPhoto8", bundle: ..., traitCollection: ...)`
    static func fluidPhoto8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluidPhoto8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluidPhoto9", bundle: ..., traitCollection: ...)`
    static func fluidPhoto9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluidPhoto9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "france", bundle: ..., traitCollection: ...)`
    static func france(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.france, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "germany", bundle: ..., traitCollection: ...)`
    static func germany(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.germany, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ghost", bundle: ..., traitCollection: ...)`
    static func ghost(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ghost, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "goodfellas", bundle: ..., traitCollection: ...)`
    static func goodfellas(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goodfellas, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "halloween", bundle: ..., traitCollection: ...)`
    static func halloween(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.halloween, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hat", bundle: ..., traitCollection: ...)`
    static func hat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heart", bundle: ..., traitCollection: ...)`
    static func heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "holySmoke", bundle: ..., traitCollection: ...)`
    static func holySmoke(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.holySmoke, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_backpack", bundle: ..., traitCollection: ...)`
    static func ic_backpack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_backpack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_book", bundle: ..., traitCollection: ...)`
    static func ic_book(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_book, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_camera", bundle: ..., traitCollection: ...)`
    static func ic_camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_coffee", bundle: ..., traitCollection: ...)`
    static func ic_coffee(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_coffee, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_glasses", bundle: ..., traitCollection: ...)`
    static func ic_glasses(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_glasses, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_ice_cream", bundle: ..., traitCollection: ...)`
    static func ic_ice_cream(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_ice_cream, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_smoking_pipe", bundle: ..., traitCollection: ...)`
    static func ic_smoking_pipe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_smoking_pipe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_vespa", bundle: ..., traitCollection: ...)`
    static func ic_vespa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_vespa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "inTheCut", bundle: ..., traitCollection: ...)`
    static func inTheCut(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.inTheCut, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ireland", bundle: ..., traitCollection: ...)`
    static func ireland(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ireland, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "italy", bundle: ..., traitCollection: ...)`
    static func italy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.italy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "janeCampion", bundle: ..., traitCollection: ...)`
    static func janeCampion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.janeCampion, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "johnCarpenter", bundle: ..., traitCollection: ...)`
    static func johnCarpenter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.johnCarpenter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "jungleFever", bundle: ..., traitCollection: ...)`
    static func jungleFever(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jungleFever, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kanagawa", bundle: ..., traitCollection: ...)`
    static func kanagawa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kanagawa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lifeAquatic", bundle: ..., traitCollection: ...)`
    static func lifeAquatic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lifeAquatic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "like", bundle: ..., traitCollection: ...)`
    static func like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "like_fill", bundle: ..., traitCollection: ...)`
    static func like_fill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like_fill, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "like_normal", bundle: ..., traitCollection: ...)`
    static func like_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "malcomX", bundle: ..., traitCollection: ...)`
    static func malcomX(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.malcomX, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "martinScorsese", bundle: ..., traitCollection: ...)`
    static func martinScorsese(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.martinScorsese, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mascot_swifty-birthday-party", bundle: ..., traitCollection: ...)`
    static func mascot_swiftyBirthdayParty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mascot_swiftyBirthdayParty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "monaco", bundle: ..., traitCollection: ...)`
    static func monaco(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.monaco, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nigeria", bundle: ..., traitCollection: ...)`
    static func nigeria(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nigeria, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "overlay", bundle: ..., traitCollection: ...)`
    static func overlay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.overlay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "owl", bundle: ..., traitCollection: ...)`
    static func owl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.owl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pause", bundle: ..., traitCollection: ...)`
    static func pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pause, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "play", bundle: ..., traitCollection: ...)`
    static func play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "poland", bundle: ..., traitCollection: ...)`
    static func poland(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.poland, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pot", bundle: ..., traitCollection: ...)`
    static func pot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pumkin", bundle: ..., traitCollection: ...)`
    static func pumkin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pumkin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ragingBull", bundle: ..., traitCollection: ...)`
    static func ragingBull(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ragingBull, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rip", bundle: ..., traitCollection: ...)`
    static func rip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "royalTenenbaums", bundle: ..., traitCollection: ...)`
    static func royalTenenbaums(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.royalTenenbaums, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rushmore", bundle: ..., traitCollection: ...)`
    static func rushmore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rushmore, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "russia", bundle: ..., traitCollection: ...)`
    static func russia(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.russia, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rwdevcon-bg", bundle: ..., traitCollection: ...)`
    static func rwdevconBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rwdevconBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scanners", bundle: ..., traitCollection: ...)`
    static func scanners(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scanners, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "se-icon", bundle: ..., traitCollection: ...)`
    static func seIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.seIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "skull", bundle: ..., traitCollection: ...)`
    static func skull(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skull, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sky", bundle: ..., traitCollection: ...)`
    static func sky(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sky, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smile", bundle: ..., traitCollection: ...)`
    static func smile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "spain", bundle: ..., traitCollection: ...)`
    static func spain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.spain, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "spikeLee", bundle: ..., traitCollection: ...)`
    static func spikeLee(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.spikeLee, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "taxiDriver", bundle: ..., traitCollection: ...)`
    static func taxiDriver(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.taxiDriver, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "theFly", bundle: ..., traitCollection: ...)`
    static func theFly(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.theFly, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "thePiano", bundle: ..., traitCollection: ...)`
    static func thePiano(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thePiano, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "theThing", bundle: ..., traitCollection: ...)`
    static func theThing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.theThing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "theyLive", bundle: ..., traitCollection: ...)`
    static func theyLive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.theyLive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "toxic", bundle: ..., traitCollection: ...)`
    static func toxic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toxic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uk", bundle: ..., traitCollection: ...)`
    static func uk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "us", bundle: ..., traitCollection: ...)`
    static func us(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.us, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "videodrome", bundle: ..., traitCollection: ...)`
    static func videodrome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.videodrome, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wesAnderson", bundle: ..., traitCollection: ...)`
    static func wesAnderson(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wesAnderson, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 41 nibs.
  struct nib {
    /// Nib `ActionCell`.
    static let actionCell = _R.nib._ActionCell()
    /// Nib `AdCell`.
    static let adCell = _R.nib._AdCell()
    /// Nib `AttributedStringViewController`.
    static let attributedStringViewController = _R.nib._AttributedStringViewController()
    /// Nib `AuteurTableViewCell`.
    static let auteurTableViewCell = _R.nib._AuteurTableViewCell()
    /// Nib `BarCodeGenerateController`.
    static let barCodeGenerateController = _R.nib._BarCodeGenerateController()
    /// Nib `BayleafLoginViewController`.
    static let bayleafLoginViewController = _R.nib._BayleafLoginViewController()
    /// Nib `BirdSoundTableViewCell`.
    static let birdSoundTableViewCell = _R.nib._BirdSoundTableViewCell()
    /// Nib `BlueLibraryViewController`.
    static let blueLibraryViewController = _R.nib._BlueLibraryViewController()
    /// Nib `CommentCell`.
    static let commentCell = _R.nib._CommentCell()
    /// Nib `CornerRadiusTableViewCell`.
    static let cornerRadiusTableViewCell = _R.nib._CornerRadiusTableViewCell()
    /// Nib `CustomControlViewController`.
    static let customControlViewController = _R.nib._CustomControlViewController()
    /// Nib `CustomTableViewCell`.
    static let customTableViewCell = _R.nib._CustomTableViewCell()
    /// Nib `CustomViewController`.
    static let customViewController = _R.nib._CustomViewController()
    /// Nib `DRHTextFieldViewController`.
    static let drhTextFieldViewController = _R.nib._DRHTextFieldViewController()
    /// Nib `DifferentViewController`.
    static let differentViewController = _R.nib._DifferentViewController()
    /// Nib `FSPageViewController`.
    static let fsPageViewController = _R.nib._FSPageViewController()
    /// Nib `FaveButtonViewController`.
    static let faveButtonViewController = _R.nib._FaveButtonViewController()
    /// Nib `FilmTableViewCell`.
    static let filmTableViewCell = _R.nib._FilmTableViewCell()
    /// Nib `FlagViewController`.
    static let flagViewController = _R.nib._FlagViewController()
    /// Nib `GameViewController`.
    static let gameViewController = _R.nib._GameViewController()
    /// Nib `GradientViewController`.
    static let gradientViewController = _R.nib._GradientViewController()
    /// Nib `GrowingCell`.
    static let growingCell = _R.nib._GrowingCell()
    /// Nib `IconCollectionViewCell`.
    static let iconCollectionViewCell = _R.nib._IconCollectionViewCell()
    /// Nib `ImageCell`.
    static let imageCell = _R.nib._ImageCell()
    /// Nib `MergeVideoViewController`.
    static let mergeVideoViewController = _R.nib._MergeVideoViewController()
    /// Nib `ModeratorTableViewCell`.
    static let moderatorTableViewCell = _R.nib._ModeratorTableViewCell()
    /// Nib `ModeratorsSearchViewController`.
    static let moderatorsSearchViewController = _R.nib._ModeratorsSearchViewController()
    /// Nib `MultipleSelectionViewController`.
    static let multipleSelectionViewController = _R.nib._MultipleSelectionViewController()
    /// Nib `MyFirstView`.
    static let myFirstView = _R.nib._MyFirstView()
    /// Nib `PhotoDetailViewController`.
    static let photoDetailViewController = _R.nib._PhotoDetailViewController()
    /// Nib `PhotoListTableViewCell`.
    static let photoListTableViewCell = _R.nib._PhotoListTableViewCell()
    /// Nib `PickerViewController`.
    static let pickerViewController = _R.nib._PickerViewController()
    /// Nib `PlayVideoViewController`.
    static let playVideoViewController = _R.nib._PlayVideoViewController()
    /// Nib `PlayerViewController`.
    static let playerViewController = _R.nib._PlayerViewController()
    /// Nib `ProgramaticallyCreateViewController`.
    static let programaticallyCreateViewController = _R.nib._ProgramaticallyCreateViewController()
    /// Nib `RealnameCell`.
    static let realnameCell = _R.nib._RealnameCell()
    /// Nib `RecordVideoViewController`.
    static let recordVideoViewController = _R.nib._RecordVideoViewController()
    /// Nib `SlideViewController`.
    static let slideViewController = _R.nib._SlideViewController()
    /// Nib `SuperHeroNameCell`.
    static let superHeroNameCell = _R.nib._SuperHeroNameCell()
    /// Nib `UserCell`.
    static let userCell = _R.nib._UserCell()
    /// Nib `VideoNinjaViewController`.
    static let videoNinjaViewController = _R.nib._VideoNinjaViewController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ActionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.actionCell) instead")
    static func actionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.actionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AdCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.adCell) instead")
    static func adCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.adCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AttributedStringViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.attributedStringViewController) instead")
    static func attributedStringViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.attributedStringViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AuteurTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.auteurTableViewCell) instead")
    static func auteurTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.auteurTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BarCodeGenerateController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.barCodeGenerateController) instead")
    static func barCodeGenerateController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.barCodeGenerateController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BayleafLoginViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bayleafLoginViewController) instead")
    static func bayleafLoginViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bayleafLoginViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BirdSoundTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.birdSoundTableViewCell) instead")
    static func birdSoundTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.birdSoundTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BlueLibraryViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.blueLibraryViewController) instead")
    static func blueLibraryViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.blueLibraryViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CommentCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.commentCell) instead")
    static func commentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commentCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CornerRadiusTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cornerRadiusTableViewCell) instead")
    static func cornerRadiusTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cornerRadiusTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CustomControlViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customControlViewController) instead")
    static func customControlViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customControlViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CustomTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customTableViewCell) instead")
    static func customTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CustomViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customViewController) instead")
    static func customViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DRHTextFieldViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.drhTextFieldViewController) instead")
    static func drhTextFieldViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.drhTextFieldViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DifferentViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.differentViewController) instead")
    static func differentViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.differentViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FSPageViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.fsPageViewController) instead")
    static func fsPageViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fsPageViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FaveButtonViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.faveButtonViewController) instead")
    static func faveButtonViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.faveButtonViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FilmTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.filmTableViewCell) instead")
    static func filmTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filmTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FlagViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.flagViewController) instead")
    static func flagViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.flagViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GameViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gameViewController) instead")
    static func gameViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gameViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GradientViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gradientViewController) instead")
    static func gradientViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gradientViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GrowingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.growingCell) instead")
    static func growingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.growingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IconCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.iconCollectionViewCell) instead")
    static func iconCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iconCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ImageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imageCell) instead")
    static func imageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imageCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MergeVideoViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mergeVideoViewController) instead")
    static func mergeVideoViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mergeVideoViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ModeratorTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.moderatorTableViewCell) instead")
    static func moderatorTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.moderatorTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ModeratorsSearchViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.moderatorsSearchViewController) instead")
    static func moderatorsSearchViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.moderatorsSearchViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MultipleSelectionViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.multipleSelectionViewController) instead")
    static func multipleSelectionViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.multipleSelectionViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyFirstView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myFirstView) instead")
    static func myFirstView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myFirstView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PhotoDetailViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.photoDetailViewController) instead")
    static func photoDetailViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photoDetailViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PhotoListTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.photoListTableViewCell) instead")
    static func photoListTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photoListTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PickerViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pickerViewController) instead")
    static func pickerViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pickerViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PlayVideoViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.playVideoViewController) instead")
    static func playVideoViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.playVideoViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PlayerViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.playerViewController) instead")
    static func playerViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.playerViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProgramaticallyCreateViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.programaticallyCreateViewController) instead")
    static func programaticallyCreateViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.programaticallyCreateViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RealnameCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.realnameCell) instead")
    static func realnameCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.realnameCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RecordVideoViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.recordVideoViewController) instead")
    static func recordVideoViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.recordVideoViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SlideViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.slideViewController) instead")
    static func slideViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.slideViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SuperHeroNameCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.superHeroNameCell) instead")
    static func superHeroNameCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.superHeroNameCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userCell) instead")
    static func userCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VideoNinjaViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoNinjaViewController) instead")
    static func videoNinjaViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoNinjaViewController)
    }
    #endif

    static func actionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ActionCell? {
      return R.nib.actionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActionCell
    }

    static func adCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AdCell? {
      return R.nib.adCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AdCell
    }

    static func attributedStringViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.attributedStringViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func auteurTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AuteurTableViewCell? {
      return R.nib.auteurTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AuteurTableViewCell
    }

    static func barCodeGenerateController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.barCodeGenerateController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func bayleafLoginViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.bayleafLoginViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func birdSoundTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BirdSoundTableViewCell? {
      return R.nib.birdSoundTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BirdSoundTableViewCell
    }

    static func blueLibraryViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.blueLibraryViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func commentCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentCell? {
      return R.nib.commentCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentCell
    }

    static func cornerRadiusTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CornerRadiusTableViewCell? {
      return R.nib.cornerRadiusTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CornerRadiusTableViewCell
    }

    static func customControlViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.customControlViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func customTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomTableViewCell? {
      return R.nib.customTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomTableViewCell
    }

    static func customViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.customViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func differentViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.differentViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func drhTextFieldViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.drhTextFieldViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func faveButtonViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.faveButtonViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func filmTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FilmTableViewCell? {
      return R.nib.filmTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FilmTableViewCell
    }

    static func flagViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.flagViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func fsPageViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.fsPageViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func gameViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GameView? {
      return R.nib.gameViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GameView
    }

    static func gradientViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.gradientViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func growingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GrowingCell? {
      return R.nib.growingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GrowingCell
    }

    static func iconCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IconCollectionViewCell? {
      return R.nib.iconCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IconCollectionViewCell
    }

    static func imageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImageCell? {
      return R.nib.imageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageCell
    }

    static func mergeVideoViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.mergeVideoViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func moderatorTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ModeratorTableViewCell? {
      return R.nib.moderatorTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ModeratorTableViewCell
    }

    static func moderatorsSearchViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.moderatorsSearchViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func multipleSelectionViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.multipleSelectionViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func myFirstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.myFirstView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func photoDetailViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.photoDetailViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func photoListTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PhotoListTableViewCell? {
      return R.nib.photoListTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhotoListTableViewCell
    }

    static func pickerViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.pickerViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func playVideoViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.playVideoViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func playerViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.playerViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func programaticallyCreateViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.programaticallyCreateViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func realnameCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RealnameCell? {
      return R.nib.realnameCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RealnameCell
    }

    static func recordVideoViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.recordVideoViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func slideViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.slideViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func superHeroNameCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SuperHeroNameCell? {
      return R.nib.superHeroNameCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SuperHeroNameCell
    }

    static func userCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserCell? {
      return R.nib.userCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserCell
    }

    static func videoNinjaViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.videoNinjaViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _BayleafLoginViewController.validate()
      try _BirdSoundTableViewCell.validate()
      try _FaveButtonViewController.validate()
      try _FlagViewController.validate()
      try _ModeratorsSearchViewController.validate()
      try _PickerViewController.validate()
      try _SlideViewController.validate()
    }

    struct _ActionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ActionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ActionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActionCell
      }

      fileprivate init() {}
    }

    struct _AdCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AdCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AdCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AdCell
      }

      fileprivate init() {}
    }

    struct _AttributedStringViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AttributedStringViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _AuteurTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AuteurTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AuteurTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AuteurTableViewCell
      }

      fileprivate init() {}
    }

    struct _BarCodeGenerateController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BarCodeGenerateController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _BayleafLoginViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BayleafLoginViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "background_Bayleaf", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background_Bayleaf' is used in nib 'BayleafLoginViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _BirdSoundTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BirdSoundTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BirdSoundTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BirdSoundTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'play' is used in nib 'BirdSoundTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _BlueLibraryViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BlueLibraryViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CommentCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CommentCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentCell
      }

      fileprivate init() {}
    }

    struct _CornerRadiusTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CornerRadiusTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CornerRadiusTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CornerRadiusTableViewCell
      }

      fileprivate init() {}
    }

    struct _CustomControlViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomControlViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CustomTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomTableViewCell
      }

      fileprivate init() {}
    }

    struct _CustomViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _DRHTextFieldViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DRHTextFieldViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _DifferentViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DifferentViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _FSPageViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FSPageViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _FaveButtonViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FaveButtonViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "heart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heart' is used in nib 'FaveButtonViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like' is used in nib 'FaveButtonViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "smile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'smile' is used in nib 'FaveButtonViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star' is used in nib 'FaveButtonViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _FilmTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FilmTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FilmTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FilmTableViewCell
      }

      fileprivate init() {}
    }

    struct _FlagViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FlagViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "us", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'us' is used in nib 'FlagViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GameViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GameViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GameView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GameView
      }

      fileprivate init() {}
    }

    struct _GradientViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GradientViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _GrowingCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GrowingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GrowingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GrowingCell
      }

      fileprivate init() {}
    }

    struct _IconCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "IconCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IconCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IconCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _ImageCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ImageCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageCell
      }

      fileprivate init() {}
    }

    struct _MergeVideoViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MergeVideoViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ModeratorTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ModeratorTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ModeratorTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ModeratorTableViewCell
      }

      fileprivate init() {}
    }

    struct _ModeratorsSearchViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ModeratorsSearchViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "se-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'se-icon' is used in nib 'ModeratorsSearchViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MultipleSelectionViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MultipleSelectionViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MyFirstView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyFirstView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PhotoDetailViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PhotoDetailViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PhotoListTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PhotoListTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PhotoListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhotoListTableViewCell
      }

      fileprivate init() {}
    }

    struct _PickerViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PickerViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "mascot_swifty-birthday-party", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mascot_swifty-birthday-party' is used in nib 'PickerViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "rw-dark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'rw-dark' is used in nib 'PickerViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "rw-green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'rw-green' is used in nib 'PickerViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PlayVideoViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PlayVideoViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PlayerViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PlayerViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ProgramaticallyCreateViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProgramaticallyCreateViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _RealnameCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RealnameCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RealnameCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RealnameCell
      }

      fileprivate init() {}
    }

    struct _RecordVideoViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RecordVideoViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SlideViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SlideViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "background_Bayleaf", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background_Bayleaf' is used in nib 'SlideViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SuperHeroNameCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SuperHeroNameCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SuperHeroNameCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SuperHeroNameCell
      }

      fileprivate init() {}
    }

    struct _UserCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UserCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserCell
      }

      fileprivate init() {}
    }

    struct _VideoNinjaViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "VideoNinjaViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "rwdevcon-bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rwdevcon-bg' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
