## Note: all of the config entries below are just examples with placeholders. Be sure to edit and adjust to your needs when uncommenting.

## In case your config entries all use a common input/output parent directory, you can specify those here.
##   Every input/output paths in the rest of the config will then be expressed relative to these.
##   Those two top-level keys are optional and default to "." (the directory of the config file).
input_dir: DrinksUp!/
output_dir: DrinksUp!/Generated/


## Generate constants for your localized strings.
##   Be sure that SwiftGen only parses ONE locale (typically Base.lproj, or en.lproj, or whichever your development region is); otherwise it will generate the same keys multiple times.
##   SwiftGen will parse all `.strings` files found in that folder.
strings:
 inputs:
   - en.lproj
 outputs:
   - templateName: structured-swift5
     params:
       # 将生成的枚举的访问修饰符更改为 public
       publicAccess: true
       # 'L10n' 是 'localization' 的缩写，而 'i18n' 是 ' internationalization ' 的缩写，尽管这种缩写方式有其合理性，但在为顶级字符串类型命名时，使用不同的名称可能会更加清晰和易于理解。
       # 将默认生成的枚举类型名称从 'L10n' 更改为 'Strings'
       enumName: Strings
     output: Strings+Generated.swift


## Generate constants for your Assets Catalogs, including constants for images, colors, ARKit resources, etc.
##   This example also shows how to provide additional parameters to your template to customize the output.
##   - Especially the `forceProvidesNamespaces: true` param forces to create sub-namespace for each folder/group used in your Asset Catalogs, even the ones without "Provides Namespace". Without this param, SwiftGen only generates sub-namespaces for folders/groups which have the "Provides Namespace" box checked in the Inspector pane.
##   - To know which params are supported for a template, use `swiftgen template doc xcassets swift5` to open the template documentation on GitHub.
xcassets:
  inputs:
    - Assets.xcassets
    - Colors.xcassets
  outputs:
    #- templateName: swift5
    # 注释上方代码，使用自定义模版
    - templatePath: Templates/xcassets/assets_swift5_swiftui.stencil
      params:
        # 维持你在 Assets.xcassets 中的命名空间
        forceProvidesNamespaces: true
        # 确保无论你在 inputs 中提供了多少个文件名，SwiftGen 都将维护单独的枚举来表示每个资产目录
        forceFileNameEnum: true
      output: XCAssets+Generated.swift


## Generate constants for your storyboards and XIBs.
##   This one generates 2 output files, one containing the storyboard scenes, and another for the segues.
##    (You can remove the segues entry if you don't use segues in your IB files).
##   For `inputs` we can use "." here (aka "current directory", at least relative to `input_dir` = "MyLib/Sources"),
##    and SwiftGen will recursively find all `*.storyboard` and `*.xib` files in there.
ib:
 inputs:
   - .
 outputs:
   - templateName: scenes-swift5
     output: IB-Scenes+Generated.swift
   - templateName: segues-swift5
     output: IB-Segues+Generated.swift


## There are other parsers available for you to use depending on your needs, for example:
##  - `fonts` (if you have custom ttf/ttc font files)
##  - `coredata` (for CoreData models)
##  - `json`, `yaml` and `plist` (to parse custom JSON/YAML/Plist files and generate code from their content)
## …
##
## For more info, use `swiftgen config doc` to open the full documentation on GitHub.
## https://github.com/SwiftGen/SwiftGen/tree/6.6.2/Documentation/

json:
  inputs:
    - Resources/
  outputs:
    templateName: runtime-swift5
    output: JSON+Generated.swift

